{"version":3,"sources":["components/Card/CardBack.js","data/types_of_pokemons.js","components/Card/CardFront.js","components/Card/PokCard.js","components/PokList.js","layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["CardBack","props","pokemon","pokeNumber","id","className","name","types","join","stats","map","stat","idx","key","points","weight","total_movies","all_types_of_pokemons","type","bg_color","color","CardFront","image","bgColors","arr","i","length","getBGColor","lettersColor","getLetterColor","style","background","src","alt","PokCard","showDetails","onClick","viewInfo","bind","this","PokList","console","log","pokemon_list","pokemons","pok","index","Header","filter","onChange","value","option","App","update","setState","numOfPokemons","state","setTimeout","getPokemons","filterPoksByType","e","visibleType","target","firstPok","lastPok","fetch","then","res","json","data","sprites","front_default","item","base_stat","moves","filteredPoks","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d21f42e8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function CardBack(props) {\r\n  const { pokemon } = props;\r\n  const pokeNumber = pokemon.id >= 100 ? '#'+ pokemon.id : pokemon.id >=10 ? '#0' + pokemon.id : '#00' + pokemon.id; \r\n  return (\r\n    <div className=\"back\">\r\n      <h2>{pokemon.name} - {pokeNumber}</h2>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <td>type</td>\r\n            <td>{pokemon.types.join(', ')}</td>\r\n          </tr>\r\n          {pokemon.stats.map((stat,idx)=>(\r\n            <tr key={idx}>\r\n            <td>{stat.name}</td>\r\n            <td>{stat.points}</td>\r\n            </tr>\r\n          ))}\r\n          <tr>\r\n            <td>weight</td>\r\n            <td>{pokemon.weight}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Total movies</td>\r\n            <td>{pokemon.total_movies}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n","export const all_types_of_pokemons = [\r\n {\r\n   type: 'normal',\r\n   bg_color: 'Beige',\r\n   color: 'black'\r\n },\r\n {\r\n   type: 'fighting',\r\n   bg_color: 'Crimson',\r\n   color: 'white'\r\n },\r\n {\r\n   type: 'flying',\r\n   bg_color: 'CornflowerBlue',\r\n   color: 'black'\r\n },\r\n {\r\n   type: 'poison',\r\n   bg_color: 'DarkViolet',\r\n   color: 'white',\r\n },\r\n {\r\n   type: 'ground',\r\n   bg_color: 'DarkGoldenRod',\r\n   color: 'white'\r\n },\r\n {\r\n   type: 'rock',\r\n   bg_color: 'SaddleBrown',\r\n   color: 'white'\r\n },\r\n {\r\n   type: 'bug',\r\n   bg_color: 'Olive',\r\n   color: 'white'\r\n },\r\n {\r\n   type: 'ghost',\r\n   bg_color: 'PapayaWhip',\r\n   color: 'black'\r\n },\r\n {\r\n   type: 'steel',\r\n   bg_color: 'SlateGrey',\r\n   color: 'white'\r\n },\r\n {\r\n   type: 'fire',\r\n   bg_color: 'OrangeRed',\r\n   color: 'white'\r\n },\r\n {\r\n   type: 'water',\r\n   bg_color: 'Blue',\r\n   color: 'white'\r\n },\r\n {\r\n   type: 'grass',\r\n   bg_color: 'Green',\r\n   color: 'white'\r\n },\r\n {\r\n   type: 'electric',\r\n   bg_color: 'Gold',\r\n   color: 'black'\r\n },\r\n {\r\n   type: 'psychic',\r\n   bg_color: 'HotPink',\r\n   color: 'white'\r\n },\r\n {\r\n   type: 'ice',\r\n   bg_color: 'Cyan',\r\n   color: 'black'\r\n },\r\n {\r\n   type: 'dragon',\r\n   bg_color: 'DarkSlateGrey',\r\n   color: 'white'\r\n },\r\n {\r\n   type: 'dark',\r\n   bg_color: 'Black',\r\n   color: 'white'\r\n },\r\n {\r\n   type: 'fairy',\r\n   bg_color: 'LightPink',\r\n   color: 'black'\r\n },\r\n {\r\n   type: 'unknown',\r\n   bg_color: 'WhiteSmoke',\r\n   color: 'black'\r\n }\r\n]","import React from 'react'\r\nimport { all_types_of_pokemons } from '../../data/types_of_pokemons';\r\n\r\nexport default function CardFront(props) {\r\n  const { image, name, types} = props.pokemon;\r\n  const bgColors = types.map( type => {\r\n    return getBGColor(type);\r\n  })\r\n  function background() {\r\n    return  'linear-gradient(' + (bgColors.length > 1 ? bgColors[0]+', ' + bgColors[1]+')' : bgColors[0]+', ' + bgColors[0]+')')\r\n  }\r\n  const lettersColor = types.map( type => {\r\n    return getLetterColor(type);\r\n  })\r\n  function color(){\r\n    return lettersColor.length > 1 ? lettersColor[1] : lettersColor[0]; \r\n  }\r\n\r\n  return (\r\n    <div className='front' style={{background: background()}} >\r\n      <div className='img-pokemon'>\r\n        <img src={image} alt={name} />\r\n      </div>\r\n      <h2 className=\"name-pokemon\" style={{color: color()}}>{name}</h2>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nfunction getBGColor(type){\r\n  let arr = [...all_types_of_pokemons];\r\n  for(let i = 0; i < arr.length; i++){\r\n    if(arr[i].type===type){\r\n      return arr[i].bg_color;\r\n    }\r\n  }\r\n}\r\nfunction getLetterColor(type){\r\n  let arr = [...all_types_of_pokemons];\r\n  for(let i = 0; i < arr.length; i++){\r\n    if(arr[i].type===type){\r\n      return arr[i].color;\r\n    }\r\n  } \r\n}","import React from 'react'\r\nimport CardBack from './CardBack';\r\nimport CardFront from './CardFront';\r\n\r\nexport default function PokCard(props) { \r\n  const { id, showDetails} = props.pokemon;\r\n\r\n  return (\r\n    <div onClick={props.viewInfo.bind(this,id)}  className={\"card\" + (showDetails? \" card__side\" : \"\")} >\r\n      <CardFront pokemon={props.pokemon} />\r\n      <CardBack pokemon={props.pokemon} />\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\nimport PokCard from './Card/PokCard';\r\n\r\n\r\n function PokList(props){\r\n   console.log(props)\r\n const pokemon_list = props.pokemons.map((pok,index)=> (\r\n  <PokCard \r\n          key={index} \r\n          pokemon={pok} \r\n          viewInfo={props.viewInfo}\r\n          />\r\n ));\r\n return (\r\n  <div className='pokemon_list'>\r\n    {pokemon_list}\r\n  </div>\r\n )\r\n}\r\n\r\nexport default PokList;\r\n","import React from 'react'\r\nimport { all_types_of_pokemons } from '../data/types_of_pokemons'\r\n\r\nexport default function Header({filter}) {\r\n return (\r\n   <header className='header'>\r\n    <h1 className='main-title'>POKEDEX</h1>\r\n    <label className='filter-view'><span>Sort by:</span>\r\n      <select className='select-type' onChange={filter} >\r\n        <option value='all'>all</option>\r\n        {all_types_of_pokemons.map((option,idx)=>(\r\n          <option key={idx} value={option.type}>{option.type}</option>\r\n        ))}\r\n      </select>\r\n    </label>\r\n   </header>\r\n )\r\n}\r\n","import React, { Component} from 'react';\nimport './styles/main.scss'\nimport PokList from './components/PokList';\nimport Header from './layout/Header';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      pokemons: [],\n      numOfPokemons: 1,\n      visibleType: 'all'\n    }\n  }\n\n  async getPokemons() {\n    let firstPok = this.state.numOfPokemons;\n    let lastPok = firstPok + 12;\n    for(let i = firstPok; i < lastPok; i++ ){\n      await fetch(`https://pokeapi.co/api/v2/pokemon/${i}`)\n       .then(res=> res.json())\n       .then(data => {\n         \n        this.setState({pokemons: [...this.state.pokemons,\n          {\n            name: data.name,\n            id: data.id,\n            types: [...data.types.map(type=> type.type.name)],\n            image: data.sprites.front_default,\n            stats: data.stats.map((item) => {\n              return { \n                name: item.stat.name, \n                points: item.base_stat\n              }\n            }),\n            weight: data.weight,\n            total_movies: data.moves.length,\n            showDetails: false\n          }\n         ]})\n       })\n     }\n   }\n   \n  componentDidMount() {\n    this.getPokemons()\n  }\n\n  update = () => {\n    this.setState({numOfPokemons: this.state.numOfPokemons+12})\n    setTimeout(()=>{\n    this.getPokemons();\n    },1000)\n  }\n  viewInfo = (id) => {\n    this.setState({pokemons: this.state.pokemons.map(pok=> {\n      if(pok.id === id) {\n        pok.showDetails = !pok.showDetails\n      } else {\n        pok.showDetails = false\n      } \n      return pok\n    }) })\n  }\n\n  filterPoksByType = (e) => {\n    this.setState({visibleType: e.target.value}) \n  }\n  \n  render() {\n    const filteredPoks = this.state.pokemons.filter(pokemon=>{\n      if(this.state.visibleType === 'all'){\n        return pokemon\n      } else {\n        return pokemon.types.includes(this.state.visibleType)\n      }\n    })\n\n    return (\n      <div className=\"App\">\n        <Header filter={this.filterPoksByType}/>\n        <PokList \n          pokemons={filteredPoks} \n          viewInfo={this.viewInfo}\n        />\n        <button onClick={this.update} className='btn btn--load_more'>load more</button>\n      </div>\n    )\n  } \n}\n\nexport default App;\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}